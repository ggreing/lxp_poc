services:
  rabbitmq:
    image: rabbitmq:3.13-management
    ports: ["5672:5672", "15672:15672"]
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  mongo:
    image: mongo:6
    ports: ["27017:27017"]
    volumes:
      - mongo_data:/data/db

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports: ["9000:9000", "9001:9001"]
    volumes:
      - minio_data:/data

  qdrant:
    image: qdrant/qdrant:latest
    ports: ["6333:6333"]
    volumes:
      - qdrant_data:/qdrant/storage

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data

  frontend:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
<<<<<<< HEAD

  api:
    build:
      context: ./api
    ports: ["${API_PORT:-8000}:8000"]
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST:-/}
      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017}
      MONGO_DB_OG: ${MONGO_DB_OG:-og_keys}
      MONGO_DB_INSTITUTION_PREFIX: ${MONGO_DB_INSTITUTION_PREFIX:-institution_}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BUCKET: ${MINIO_BUCKET:-lxp-artifacts}
      MINIO_SECURE: ${MINIO_SECURE:-false}
      QDRANT_HOST: ${QDRANT_HOST:-qdrant}
      QDRANT_PORT: ${QDRANT_PORT:-6333}
      APP_LOG_LEVEL: ${APP_LOG_LEVEL:-INFO}
      APP_ORG_ID: ${APP_ORG_ID:-demo-org}
      APP_SECRET_KEY: ${APP_SECRET_KEY:-devsecret}
      REDIS_HOST: ${REDIS_HOST:-redis}
      # SALES_BACKEND_URL is removed as 'sales' service is merged into 'worker'
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      # Dependency on 'sales' service is removed
    volumes:
      - ./api:/app
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    restart: unless-stopped

  # 'sales' service is now merged into the 'worker' service and removed from here.

  worker:
    build:
      context: ./worker # Build context points to the new worker directory
    # All environment variables from both old worker and sales service are combined here.
    # Using env_file is a good practice to manage these variables.
    env_file: .env
    environment:
      # You can still define variables here to override or provide defaults
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      QDRANT_HOST: ${QDRANT_HOST:-qdrant}
      QDRANT_PORT: ${QDRANT_PORT:-6333}
      REDIS_HOST: ${REDIS_HOST:-redis}
      # Environment variables from the former 'sales' service
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      GEMINI_TTS_API_KEY: ${GEMINI_TTS_API_KEY}
      MODEL_NAME: ${MODEL_NAME:-gemini-2.0-flash}
      GOOGLE_APPLICATION_CREDENTIALS: /secrets/tts.json
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      redis:
        condition: service_started
    volumes:
      - ./worker:/app # Mount the new worker code
      - ./secrets:/secrets:ro # Mount secrets for TTS, same as the old sales service
    command: ["python", "main.py"] # Command to run the new unified worker
=======

  api:
     build:
       context: .
       dockerfile: api/Dockerfile
     ports: ["${API_PORT:-8000}:8000"]
     environment:
       RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
       RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
       RABBITMQ_USER: ${RABBITMQ_USER:-guest}
       RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
       RABBITMQ_VHOST: ${RABBITMQ_VHOST:-/}
       MONGO_URI: ${MONGO_URI:-mongodb://mongo:27017}
       MONGO_DB_OG: ${MONGO_DB_OG:-og_keys}
       MONGO_DB_INSTITUTION_PREFIX: ${MONGO_DB_INSTITUTION_PREFIX:-institution_}
       MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
       MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
       MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
       MINIO_BUCKET: ${MINIO_BUCKET:-lxp-artifacts}
       MINIO_SECURE: ${MINIO_SECURE:-false}
       QDRANT_HOST: ${QDRANT_HOST:-qdrant}
       QDRANT_PORT: ${QDRANT_PORT:-6333}
       APP_LOG_LEVEL: ${APP_LOG_LEVEL:-INFO}
       APP_ORG_ID: ${APP_ORG_ID:-demo-org}
       APP_SECRET_KEY: ${APP_SECRET_KEY:-devsecret}
       REDIS_HOST: ${REDIS_HOST:-redis}
     depends_on:
       rabbitmq:
         condition: service_healthy
       mongo:
         condition: service_started
       minio:
         condition: service_started
       qdrant:
         condition: service_started
     volumes:
       - ./api:/app
     command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
     restart: unless-stopped

  worker_assist:
    build:
      context: .
      dockerfile: worker/Dockerfile
    env_file: .env
    command: ["python", "-m", "worker.AI_Assist.main"]
    depends_on:
      - rabbitmq
      - api # Depends on API for RAG queries
    restart: unless-stopped

  worker_coach:
    build:
      context: .
      dockerfile: worker/Dockerfile
    env_file: .env
    command: ["python", "-m", "worker.Galaxy_Coach.main"]
    depends_on:
      - rabbitmq
    restart: unless-stopped
    volumes:
      - ./course_data.csv:/app/course_data.csv

  worker_sim:
    build:
      context: .
      dockerfile: worker/Dockerfile
    env_file: .env
    command: ["python", "-m", "worker.AI_Simulation_Training.main"]
    depends_on:
      - rabbitmq
>>>>>>> 5959c217ade8a2a6ec870a558516693c6973e4c3
    restart: unless-stopped

volumes:
  rabbitmq_data:
  mongo_data:
  minio_data:
  qdrant_data:
  redis_data:
